version: 2.1
jobs:
    build:
        docker:
            # php
            - image: circleci/php:7.4-node-browsers
                environment:
                    MYSQL_HOST: 127.0.0.1
                    MYSQL_DB: kaherecode
                    MYSQL_USER: root
                    MYSQL_ALLOW_EMPTY_PASSWORD: true
                    MYSQL_PASSWORD:

            # mysql
            - image: circleci/mysql:5.7
                environment:
                    MYSQL_USER: root
                    MYSQL_ALLOW_EMPTY_PASSWORD: true

        steps:
            - checkout

            - run: sudo apt update
            - run: sudo docker-php-ext-install zip pdo_mysql

            # Download and cache dependencies
            - restore_cache:
                keys:
                    # "composer.lock" can be used if it is committed to the repo
                    - v1-dependencies-{{ checksum "composer.json" }}
                    # fallback to using the latest cache if no exact match is found
                    - v1-dependencies-

            - run:
                name: "Install Dependencies"
                command: composer install -n --prefer-dist

            - save_cache:
                key: v1-dependencies-{{ checksum "composer.json" }}
                paths:
                    - ./vendor

            - restore_cache: # special step to restore the dependency cache if `package.json` does not change
                keys:
                    - node-v1-{{ checksum "package.json" }}
                    # fallback to using the latest cache if no exact match is found (See https://circleci.com/docs/2.0/caching/)
                    - node-v1-

            - run:
                name: "Install JS Dependencies"
                command: yarn install

            - save_cache: # special step to save the dependency cache with the `package.json` cache key template
                key: node-v1-{{ checksum "package.json" }}
                paths:
                    - node_modules

            - run:
                name: "Build assets"
                command: yarn run encore production

            # run tests with phpunit
            - run:
                name: "Run tests"
                command: composer tests
